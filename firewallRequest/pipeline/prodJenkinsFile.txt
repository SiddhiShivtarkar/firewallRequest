currentBuild.displayName = "${ticketDetails}"+"#"+currentBuild.number
def test_output1 = ""
def project_id = ""
def zone_name = ""
def IP = ""
def env = ""
def hostname = ""
pipeline {
    agent any
    stages {

	   	stage("Validate Inputs") {
			steps {
				sh """
				docker exec ansible sh -c "export PATH='/google-cloud-sdk/bin:$PATH'; ansible-playbook /ansible_playbooks/IDOP/IDOP-dev-env/Siemens-Automation/firewallRequestnew/playbooks/firewallRequest/tasks/validate_input.yml -e 'firewall_rule_name="'"${firewall_rule_name}"'" action="'"${action}"'" protocol="'"${protocol}"'" port="'"${port}"'" description="'"${description}"'" traffic_direction="'"${traffic_direction}"'" firewall_logs="'"${firewall_logs}"'" priority="'"${priority}"'" source_range="'"${source_range}"'" destination_range="'"${destination_range}"'" request_id="'"${ticketDetails}"'" '" 
				"""
			} 
		}
		
	   	stage("Validate if firewall rule already exists, if not create a rule") {
			steps {
				sh """
				docker exec ansible sh -c "export PATH='/google-cloud-sdk/bin:$PATH'; ansible-playbook /ansible_playbooks/IDOP/IDOP-dev-env/Siemens-Automation/firewallRequestnew/playbooks/firewallRequest.yml -e 'firewall_rule_name="'"${firewall_rule_name}"'" action="'"${action}"'" protocol="'"${protocol}"'" port="'"${port}"'" description="'"${description}"'" traffic_direction="'"${traffic_direction}"'" firewall_logs="'"${firewall_logs}"'" priority="'"${priority}"'" source_range="'"${source_range}"'" destination_range="'"${destination_range}"'" request_id="'"${ticketDetails}"'" '" 
				"""  
			} 
		}
		
stage("terraform init - egress") {
    when {
        expression { traffic_direction == 'egress' }  
    }
    steps {
        script {
            hostname = sh(
                script: """
                    docker exec ansible sh -c "export PATH='/google-cloud-sdk/bin:$PATH'; gcloud compute instances list --filter='networkInterfaces.networkIP:${source_range}' --format='value(name)' "
                """,
                returnStdout: true
            ).trim()
            echo "${hostname}"
			sh """
			docker exec ansible sh -c 'cd /ansible_playbooks/workspace/firewallRequestsnew/${hostname}; env GOOGLE_APPLICATION_CREDENTIALS=/etc/prodsvc.json terraform init'
			"""
        }
    }
}

stage("terraform init - ingress") {
    when {
        expression { traffic_direction == 'ingress' }  
    }
    steps {
        script {
            hostname = sh(
                script: """
                    docker exec ansible sh -c "export PATH='/google-cloud-sdk/bin:$PATH'; gcloud compute instances list --filter='networkInterfaces.networkIP:${destination_range}' --format='value(name)' "
                """,
                returnStdout: true
            ).trim()
            echo "${hostname}"
			sh """
			docker exec ansible sh -c 'cd /ansible_playbooks/workspace/firewallRequestsnew/${hostname}; env GOOGLE_APPLICATION_CREDENTIALS=/etc/prodsvc.json terraform init'
			"""
        }
    }
}

stage("terraform plan & apply - egress") {
    when {
        expression { traffic_direction == 'egress' }  
    }
    steps {
        script {
            hostname = sh(
                script: """
                    docker exec ansible sh -c "export PATH='/google-cloud-sdk/bin:$PATH'; gcloud compute instances list --filter='networkInterfaces.networkIP:${source_range}' --format='value(name)' "
                """,
                returnStdout: true
            ).trim()
            echo "${hostname}"
			sh """
			docker exec ansible sh -c 'cd /ansible_playbooks/workspace/firewallRequestsnew/${hostname}; env GOOGLE_APPLICATION_CREDENTIALS=/etc/prodsvc.json terraform plan; env GOOGLE_APPLICATION_CREDENTIALS=/etc/prodsvc.json terraform apply -auto-approve'
			"""
        }
    } 
}	

stage("terraform plan & apply - ingress") {
    when {
        expression { traffic_direction == 'ingress' }  
    }
    steps {
        script {
            hostname = sh(
                script: """
                    docker exec ansible sh -c "export PATH='/google-cloud-sdk/bin:$PATH'; gcloud compute instances list --filter='networkInterfaces.networkIP:${destination_range}' --format='value(name)' "
                """,
                returnStdout: true
            ).trim()
            echo "${hostname}"
            sh """
			docker exec ansible sh -c 'cd /ansible_playbooks/workspace/firewallRequestsnew/${hostname}; env GOOGLE_APPLICATION_CREDENTIALS=/etc/prodsvc.json terraform plan; env GOOGLE_APPLICATION_CREDENTIALS=/etc/prodsvc.json terraform apply -auto-approve'
			"""
        }
    } 
}

		
                }
            }